<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Celeb Slideshow ‚Äî Random Photo Fetcher</title>
  <meta name="description" content="Hands‚Äëfree slideshow that auto‚Äëfetches random celebrity photos from Wikidata/Commons with keyboard, swipe, speed control, and a term-combiner builder. Includes floating blue button to reveal quick time buttons, and a collapsible name/credit bar." />
  <style>
    :root { --bg:#0b0f14; --panel:#0f172a; --muted:#93a3b8; --fg:#e5eef7; --accent:#60a5fa; --ok:#34d399; --danger:#f87171; }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Arial; background:var(--bg); color:var(--fg); display:grid; grid-template-rows:auto 1fr auto}
    header{display:flex; gap:12px; align-items:center; padding:10px 12px; position:sticky; top:0; z-index:40; background:rgba(2,6,23,.6); backdrop-filter:blur(8px) saturate(1.2); border-bottom:1px solid rgba(255,255,255,.06)}
    h1{font-size:16px; margin:0}
    .sp{flex:1}
    .btn{display:inline-flex; align-items:center; gap:8px; padding:8px 12px; border-radius:12px; border:1px solid rgba(255,255,255,.1); background:linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.02)); color:var(--fg); cursor:pointer; user-select:none; font-weight:600}
    .btn[disabled]{opacity:.5;cursor:not-allowed}
    .btn.primary{border-color:rgba(96,165,250,.5)}
    .btn.ok{border-color:rgba(52,211,153,.45)}
    .badge{font-size:12px; padding:4px 8px; border:1px solid rgba(255,255,255,.12); border-radius:999px}
    .controls{display:flex; flex-wrap:wrap; gap:10px; align-items:center}
    label{font-size:12px; color:var(--muted)}
    input[type="range"], input[type="number"], select, input[type="text"] { appearance:none; -webkit-appearance:none; color:var(--fg); background:rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.14); border-radius:10px; padding:8px 10px; font-weight:600 }
    input[type="range"]{width:160px}
    input[type="number"]{width:80px}

    .tabs{display:flex; gap:8px; padding:8px 12px; border-bottom:1px solid rgba(255,255,255,.06); background:rgba(2,6,23,.35)}
    .tab{padding:8px 12px; border-radius:10px; border:1px solid rgba(255,255,255,.1); cursor:pointer}
    .tab[aria-selected="true"]{background:rgba(96,165,250,.15); border-color:rgba(96,165,250,.5)}

    .page{display:none; height:100%}
    .page.active{display:block}

    .stage{position:relative; height:calc(100vh - 180px); min-height:360px; overflow:hidden; display:grid; place-items:center}
    .imgwrap{position:relative; width:100%; height:100%; display:grid; place-items:center}
    img.photo{max-width:100%; max-height:100%; object-fit:contain; border-radius:18px; box-shadow:0 12px 36px rgba(0,0,0,.6)}

    .nameBar{position:absolute; left:12px; right:12px; bottom:12px; background:rgba(2,6,23,.78); border:1px solid rgba(255,255,255,.08); border-radius:12px; padding:8px 10px; cursor:pointer}
    .nameBar.collapsed{height:18px; overflow:hidden}
    .title{font-size:18px; font-weight:800}
    .caption{font-size:13px; color:var(--muted)}
    .hint{font-size:12px; color:#93a3b8}

    .builder{padding:12px}
    .grid{display:grid; grid-template-columns:repeat(auto-fill, minmax(160px, 1fr)); gap:10px}
    .termBtn{padding:10px 12px; border-radius:12px; background:rgba(255,255,255,.04); border:1px solid rgba(255,255,255,.12); cursor:pointer; text-align:left; user-select:none}
    .termBtn.selected{outline:2px solid var(--accent); background:rgba(96,165,250,.15)}
    .termBtn.editing{outline:2px dashed #fbbf24}

    footer{padding:10px 12px; display:flex; flex-wrap:wrap; gap:12px; align-items:center; color:var(--muted); border-top:1px solid rgba(255,255,255,.06)}
    footer a{color:var(--ok); text-decoration:none}

    .toast{position:fixed; right:16px; bottom:16px; background:rgba(2,6,23,.85); color:var(--fg); border:1px solid rgba(255,255,255,.09); padding:10px 12px; border-radius:12px; font-size:13px; display:none}

    /* Floating blue button + drawer */
    .fab{position:fixed; right:16px; bottom:16px; width:56px; height:56px; border-radius:50%; background:#3b82f6; color:white; display:grid; place-items:center; font-size:22px; cursor:pointer; box-shadow:0 10px 24px rgba(0,0,0,.35); z-index:60}
    .drawer{position:fixed; left:0; right:0; bottom:-140px; background:rgba(15,23,42,.96); border-top:1px solid rgba(255,255,255,.08); padding:12px; display:grid; gap:10px; transition:bottom .25s ease; z-index:55}
    .drawer.open{bottom:0}
    .quickRow{display:flex; gap:8px; flex-wrap:wrap}
    .quickBtn{padding:8px 10px; border-radius:10px; border:1px solid rgba(255,255,255,.14); background:rgba(255,255,255,.06); color:#e5eef7; cursor:pointer; font-weight:700}
  </style>
</head>
<body>
  <header>
    <h1>üéûÔ∏è Celeb Slideshow</h1>
    <span class="badge" id="countBadge">Loading‚Ä¶</span>
    <div class="sp"></div>
    <div class="controls">
      <button class="btn primary" id="playPauseBtn" title="Toggle autoplay">‚è∏Ô∏é Pause</button>
      <button class="btn" id="nextBtn" title="Next photo">‚Üí Next</button>
      <label>Speed
        <input type="range" id="speed" min="0.1" max="10" step="0.1" value="2" />
      </label>
      <label>Seconds
        <input type="number" id="secs" min="0.1" max="10" step="0.1" value="2" />
      </label>
      <button class="btn ok" id="openBuilder">‚öôÔ∏è Terms</button>
    </div>
  </header>

  <nav class="tabs" role="tablist">
    <button class="tab" role="tab" aria-controls="page1" aria-selected="true" id="tab1">Page 1: Slideshow</button>
    <button class="tab" role="tab" aria-controls="page2" aria-selected="false" id="tab2">Page 2: Term Builder</button>
  </nav>

  <main>
    <section id="page1" class="page active" role="tabpanel" aria-labelledby="tab1">
      <div class="stage" id="stage">
        <div class="imgwrap" id="imgwrap"><div class="hint">Fetching photos‚Ä¶</div></div>
        <div class="nameBar collapsed" id="nameBar">
          <div class="title" id="personName">&nbsp;</div>
          <div class="caption" id="caption"><span class="hint">Tap to show/hide name & credit</span></div>
        </div>
      </div>
    </section>

    <section id="page2" class="page" role="tabpanel" aria-labelledby="tab2">
      <div class="builder">
        <div class="hint">Tap a term to select (turns blue). <strong>Triple‚Äëclick</strong> a term to edit it. Add your own terms (e.g. "Swedish politicians", "UK celebrity", "50s movie stars"). Press <em>Combine</em> to build the search. The slideshow randomly picks from selected terms.</div>
        <div class="grid" id="termGrid"></div>
        <div style="display:flex; gap:8px; margin-top:10px; align-items:center; flex-wrap:wrap">
          <input type="text" id="customTerm" placeholder="Add a term‚Ä¶" />
          <button class="btn ok" id="addTerm">Add</button>
          <button class="btn primary" id="combineBtn">Combine ‚ñ∂</button>
          <span class="hint" id="resolveHint"></span>
        </div>
      </div>
    </section>
  </main>

  <footer>
    <div>Source: <a href="https://www.wikidata.org/" target="_blank" rel="noopener">Wikidata</a> & <a href="https://commons.wikimedia.org/" target="_blank" rel="noopener">Wikimedia Commons</a>. Keyboard: <kbd>Any key</kbd> = next, <kbd>‚Üê</kbd> = previous, <kbd>‚Üí</kbd> = next. Swipe: left/right. Autoplay runs if you do nothing.</div>
    <div class="sp"></div>
    <a href="#" id="downloadLink" title="Download current image">Download</a>
  </footer>

  <!-- Floating blue ball to toggle quick time buttons -->
  <button class="fab" id="speedFab" title="Speed">‚óè</button>
  <div class="drawer" id="speedDrawer">
    <div class="quickRow">
      <button class="quickBtn" data-s="0.1">0.1s</button>
      <button class="quickBtn" data-s="0.2">0.2s</button>
      <button class="quickBtn" data-s="0.5">0.5s</button>
      <button class="quickBtn" data-s="1">1s</button>
      <button class="quickBtn" data-s="2">2s</button>
      <button class="quickBtn" data-s="5">5s</button>
      <button class="quickBtn" data-s="10">10s</button>
    </div>
  </div>

  <div class="toast" id="toast"></div>

<script>
(function(){
  // Elements
  const stage = document.getElementById('stage');
  const wrap = document.getElementById('imgwrap');
  const nameBar = document.getElementById('nameBar');
  const personName = document.getElementById('personName');
  const caption = document.getElementById('caption');
  const countBadge = document.getElementById('countBadge');
  const playPauseBtn = document.getElementById('playPauseBtn');
  const nextBtn = document.getElementById('nextBtn');
  const speed = document.getElementById('speed');
  const secs = document.getElementById('secs');
  const openBuilder = document.getElementById('openBuilder');
  const tab1 = document.getElementById('tab1');
  const tab2 = document.getElementById('tab2');
  const page1 = document.getElementById('page1');
  const page2 = document.getElementById('page2');
  const termGrid = document.getElementById('termGrid');
  const customTerm = document.getElementById('customTerm');
  const addTerm = document.getElementById('addTerm');
  const combineBtn = document.getElementById('combineBtn');
  const downloadLink = document.getElementById('downloadLink');
  const toast = document.getElementById('toast');
  const speedFab = document.getElementById('speedFab');
  const speedDrawer = document.getElementById('speedDrawer');

  // State
  let items = []; // { name, imageUrl, fileTitle, itemUrl }
  let timer = null;
  let autoplay = true;
  let currIndex = -1;
  let lastKeyTime = 0;

  // Defaults (>=25)
  const defaultTerms = [
    'Norwegian actors','Norwegian musicians','Norwegian comedians','Norwegian writers','Norwegian politicians',
    'Swedish politicians','Swedish actors','Danish actors','Finnish musicians','Icelandic singers',
    'UK celebrity','British actors','British comedians','Irish musicians','French actors',
    'German footballers','Spanish footballers','Italian actors','American film directors','Canadian singers',
    'Indian actors','Japanese actors','Korean pop singers','Brazilian footballers','50s movie stars'
  ];

  const countryMap = { 'norwegian':'Q20','norway':'Q20','swedish':'Q34','sweden':'Q34','danish':'Q35','denmark':'Q35','finnish':'Q33','finland':'Q33','icelandic':'Q189','iceland':'Q189','british':'Q145','uk':'Q145','english':'Q21','scottish':'Q22','irish':'Q27','french':'Q142','german':'Q183','spanish':'Q29','italian':'Q38','american':'Q30','canadian':'Q16','indian':'Q668','japanese':'Q17','korean':'Q884','brazilian':'Q155' };
  const roleMap = { 'actor':'Q33999','actors':'Q33999','actress':'Q33999','film actors':'Q33999','movie stars':'Q33999','50s movie stars':'Q33999','silent film actors':'Q10800557','musician':'Q639669','musicians':'Q639669','singer':'Q177220','singers':'Q177220','composer':'Q36834','classical composers':'Q36834','jazz musicians':'Q11060274','comedian':'Q245068','comedians':'Q245068','writer':'Q36180','writers':'Q36180','politician':'Q82955','politicians':'Q82955','footballer':'Q937857','footballers':'Q937857','director':'Q2526255','film directors':'Q2526255','tv presenters':'Q947873','youtubers':'Q1931868','influencers':'Q20074590' };

  function showToast(msg){ toast.textContent=msg; toast.style.display='block'; setTimeout(()=> toast.style.display='none', 2000); }
  const shuffle = (arr)=> arr.map(v=>[Math.random(),v]).sort((a,b)=>a[0]-b[0]).map(x=>x[1]);

  function parseTerm(term){ term = term.trim().toLowerCase(); let countryQ=null, roleQ=null; Object.keys(countryMap).forEach(k=>{ if(term.includes(k)) countryQ = countryQ || countryMap[k]; }); Object.keys(roleMap).forEach(k=>{ if(term.includes(k)) roleQ = roleQ || roleMap[k]; }); return { countryQ, roleQ }; }

  function buildSPARQLFromPairs(pairs){ const blocks = pairs.map(({countryQ, roleQ})=>{ const parts = [ '?person wdt:P31 wd:Q5 ;', countryQ ? `  wdt:P27 wd:${countryQ} ;` : '', roleQ ? `  wdt:P106 wd:${roleQ} ;` : '', '  wdt:P18 ?image .' ].filter(Boolean).join('\n'); return `{ ${parts} }`; }).join('\nUNION\n'); return `SELECT ?person ?personLabel ?image WHERE {\n${blocks}\nSERVICE wikibase:label { bd:serviceParam wikibase:language "nb,nn,no,en". }\n}\nLIMIT 800`; }

  async function fetchWDFromTerms(terms){ const pairs = terms.map(t=>parseTerm(t)); const anyValid = pairs.some(p=>p.countryQ || p.roleQ); const sparql = anyValid ? buildSPARQLFromPairs(pairs) : `SELECT ?person ?personLabel ?image WHERE { ?person wdt:P31 wd:Q5 ; wdt:P27 wd:Q20 ; wdt:P18 ?image . SERVICE wikibase:label { bd:serviceParam wikibase:language "nb,nn,no,en". } } LIMIT 600`; const url = 'https://query.wikidata.org/sparql?format=json&query=' + encodeURIComponent(sparql); const res = await fetch(url, { headers: { 'Accept':'application/sparql-results+json' } }); if(!res.ok) throw new Error('Wikidata error '+res.status); const data = await res.json(); return data.results.bindings.map(r=>{ const name = r.personLabel?.value || 'Unknown'; const imageField = r.image?.value || ''; let imageUrl = imageField; if (!imageUrl.includes('Special:FilePath')) { let fn = imageUrl; if (fn.startsWith('http')) { try { const u = new URL(fn); const last = decodeURIComponent(u.pathname.split('/').pop()); fn = last.startsWith('File:') ? last : 'File:'+last; } catch {} } if (!fn.startsWith('File:')) fn = 'File:' + fn.replace(/^.*File:/,''); imageUrl = 'https://commons.wikimedia.org/wiki/Special:FilePath/' + encodeURIComponent(fn.replace(/^File:/,'')) + '?width=1600'; } else { if (!/\?width=/.test(imageUrl)) imageUrl += (imageUrl.includes('?')?'&':'?')+'width=1600'; } let fileTitle = 'File:'; if (imageUrl.includes('Special:FilePath/')) fileTitle += decodeURIComponent(imageUrl.split('Special:FilePath/')[1].split('?')[0]); const itemUrl = r.person?.value || '#'; return { name, imageUrl, fileTitle, itemUrl }; }); }

  async function fetchAttribution(fileTitle){ try{ const url = 'https://commons.wikimedia.org/w/api.php?action=query&format=json&origin=*&prop=imageinfo&iiprop=extmetadata|url&titles=' + encodeURIComponent(fileTitle); const res = await fetch(url); const data = await res.json(); const page = data?.query?.pages ? Object.values(data.query.pages)[0] : null; const info = page?.imageinfo?.[0]; const meta = info?.extmetadata || {}; const artist = meta.Artist?.value || ''; const credit = meta.Credit?.value || ''; const license = meta.LicenseShortName?.value || ''; const filePageUrl = page?.fullurl || ('https://commons.wikimedia.org/wiki/' + encodeURIComponent(fileTitle)); return { artist, credit, license, filePageUrl }; }catch(e){ return { artist:'', credit:'', license:'', filePageUrl: 'https://commons.wikimedia.org/wiki/' + encodeURIComponent(fileTitle) }; } }

  function clearImage(){ wrap.innerHTML = '<div class="hint">Loading‚Ä¶</div>'; nameBar.classList.add('collapsed'); }

  async function showIndex(i){ if(!items.length) return; currIndex = (i + items.length) % items.length; const it = items[currIndex]; clearImage(); const img = new Image(); img.className='photo'; img.decoding='async'; img.onload = async ()=>{ wrap.innerHTML=''; wrap.appendChild(img); personName.innerHTML = `<a href="${it.itemUrl}" target="_blank" rel="noopener" style="color:var(--fg); text-decoration:none">${it.name}</a>`; const { artist, credit, license, filePageUrl } = await fetchAttribution(it.fileTitle); const creditText = artist || credit || ''; caption.innerHTML = `${creditText ? creditText + ' ‚Ä¢ ' : ''}<a href="${filePageUrl}" target="_blank" rel="noopener">${it.fileTitle}</a>${license? ' ‚Ä¢ License: '+license : ''}`; downloadLink.href = it.imageUrl; downloadLink.download = it.fileTitle.replace(/^File:/,''); }; img.onerror = ()=>{ showToast('Skipped an image that failed to load'); next(); }; img.src = it.imageUrl; }

  function next(){ showIndex((currIndex + 1) % items.length); }
  function prev(){ showIndex((currIndex - 1 + items.length) % items.length); }

  function clampSeconds(){ let v = Number(secs.value)||2; if(v<0.1) v=0.1; if(v>10) v=10; secs.value=v; speed.value=v; return v; }
  function startAutoplay(){ if(timer) clearInterval(timer); const s = clampSeconds(); timer = setInterval(next, s * 1000); autoplay = true; playPauseBtn.textContent='‚è∏Ô∏é Pause'; }
  function stopAutoplay(){ if(timer) clearInterval(timer); timer=null; autoplay=false; playPauseBtn.textContent='‚ñ∂Ô∏é Play'; }

  async function loadByTerms(terms){ stopAutoplay(); clearImage(); countBadge.textContent='Fetching‚Ä¶'; try{ const data = await fetchWDFromTerms(terms); items = shuffle(data); countBadge.textContent = `${items.length} photos`; if(!items.length){ wrap.innerHTML = '<div class="hint">No results. Try different terms.</div>'; return; } showIndex(0); startAutoplay(); }catch(e){ console.error(e); wrap.innerHTML='<div class="hint">Could not fetch photos right now.</div>'; countBadge.textContent='0'; showToast('Network error fetching data'); } }

  // Tabs
  function setPage(idx){ if(idx===1){ page1.classList.add('active'); page2.classList.remove('active'); tab1.setAttribute('aria-selected','true'); tab2.setAttribute('aria-selected','false'); } else { page2.classList.add('active'); page1.classList.remove('active'); tab2.setAttribute('aria-selected','true'); tab1.setAttribute('aria-selected','false'); } }
  tab1.addEventListener('click', ()=> setPage(1));
  tab2.addEventListener('click', ()=> setPage(2));
  openBuilder.addEventListener('click', ()=> setPage(2));

  // Keyboard
  document.addEventListener('keydown', (e)=>{ const now=Date.now(); if(now - lastKeyTime < 120) return; lastKeyTime = now; if(e.key==='ArrowLeft'){ e.preventDefault(); stopAutoplay(); prev(); return; } if(e.key==='ArrowRight'){ e.preventDefault(); stopAutoplay(); next(); return; } stopAutoplay(); next(); });

  // Swipe
  let touchStartX=null, touchStartY=null; stage.addEventListener('touchstart', (e)=>{ const t=e.changedTouches[0]; touchStartX=t.clientX; touchStartY=t.clientY; }, {passive:true}); stage.addEventListener('touchend', (e)=>{ const t=e.changedTouches[0]; const dx=t.clientX - touchStartX; const dy=t.clientY - touchStartY; if(Math.abs(dx) > 40 && Math.abs(dy) < 60){ stopAutoplay(); if(dx<0) next(); else prev(); } }, {passive:true});

  // Controls
  playPauseBtn.addEventListener('click', ()=>{ if(autoplay) stopAutoplay(); else startAutoplay(); });
  nextBtn.addEventListener('click', ()=>{ stopAutoplay(); next(); });
  speed.addEventListener('input', ()=>{ secs.value = speed.value; if(autoplay) startAutoplay(); });
  secs.addEventListener('change', ()=>{ speed.value = Number(secs.value)||2; if(autoplay) startAutoplay(); });

  // Name bar toggle
  nameBar.addEventListener('click', ()=>{ nameBar.classList.toggle('collapsed'); });

  // Floating blue button + quick times
  speedFab.addEventListener('click', ()=>{ speedDrawer.classList.toggle('open'); });
  speedDrawer.querySelectorAll('.quickBtn').forEach(btn=>{ btn.addEventListener('click', ()=>{ const v = Number(btn.dataset.s); secs.value=v; speed.value=v; if(autoplay) startAutoplay(); }); });

  // Builder
  function makeTermButton(label){ const btn = document.createElement('button'); btn.type='button'; btn.className='termBtn'; btn.textContent=label; btn.dataset.clicks='0'; btn.addEventListener('click', ()=>{ const c=(+btn.dataset.clicks||0)+1; btn.dataset.clicks = String(c); if(c>=3){ btn.dataset.clicks='0'; btn.classList.add('editing'); const prev = btn.textContent; const input = document.createElement('input'); input.type='text'; input.value=prev; input.style.width='100%'; input.addEventListener('keydown', (e)=>{ if(e.key==='Enter'){ btn.textContent=input.value.trim()||prev; btn.classList.remove('editing'); } }); input.addEventListener('blur', ()=>{ btn.textContent=input.value.trim()||prev; btn.classList.remove('editing'); }); btn.innerHTML=''; btn.appendChild(input); input.focus(); input.select(); return; } btn.classList.toggle('selected'); setTimeout(()=>{ btn.dataset.clicks='0'; }, 400); }); return btn; }
  function populateDefaults(){ termGrid.innerHTML=''; defaultTerms.forEach(t=> termGrid.appendChild(makeTermButton(t))); while(termGrid.children.length < 25){ termGrid.appendChild(makeTermButton('Custom term')); } }
  addTerm.addEventListener('click', ()=>{ const t=(customTerm.value||'').trim(); if(!t) return; termGrid.prepend(makeTermButton(t)); customTerm.value=''; });
  combineBtn.addEventListener('click', ()=>{ const chosen = Array.from(termGrid.querySelectorAll('.termBtn.selected')).map(b=> b.textContent.trim()).filter(Boolean); if(!chosen.length){ showToast('Select one or more terms first.'); return; } setPage(1); loadByTerms(chosen); });

  // Initial
  populateDefaults();
  loadByTerms(['Norwegian actors','Norwegian musicians','Norwegian comedians']);
})();
</script>
</body>
</html>
